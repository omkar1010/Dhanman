import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { getMe } from "../features/authSlice";
import axios from "axios";

const schema = yup.object().shape({
  cust_name: yup.string().required("Customer Name is required"),
  comp_name: yup.string().required("Company Name is required"),
  comp_add: yup.string().required("Company Address is required"),
  gstn_number: yup
    .string()
    .required("GST Number is required")
    .matches(/^[A-Z0-9]{15}$/, "Invalid GST Number"),
  cont_num: yup
    .string()
    .required("Contact Number is required")
    .matches(/^\+?[0-9]{10,15}$/, "Invalid Contact Number"),
});

const Production = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { isError, user } = useSelector((state) => state.auth);

  const [customers, setCustomers] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false);
  const [isEditing, setIsEditing] = useState(false); // Track editing state
  const [currentCustomerId, setCurrentCustomerId] = useState("");

  useEffect(() => {
    dispatch(getMe());
  }, [dispatch]);

  useEffect(() => {
    if (isError) {
      navigate("/");
    }
  }, [isError, navigate]);

  // const fetchData = async () => {
  //   try {
  //     const response = await axios.get("http://localhost:5000/customers");
  //     console.log(response.data);
  //     setCustomers(response.data);
  //     setIsLoaded(true);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // };

  const fetchData = async () => {
    try {
      const response = await axios.get("http://localhost:5000/customers");
      console.log(response.data);
      const sortedData = response.data.sort((a, b) => {
        // Sort by createdAt timestamp in descending order
        return new Date(b.createdAt) - new Date(a.createdAt);
      });
      setCustomers(sortedData);
      setIsLoaded(true);
    } catch (error) {
      console.log(error);
    }
  };
  

  useEffect(() => {
    fetchData();
  }, []);

  const {
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm({
    resolver: yupResolver(schema),
  });

  const handleDeleteCustomer = async (id) => {
    try {
      const confirmDelete = window.confirm(
        "Are you sure you want to delete this customer?"
      );
      if (confirmDelete) {
        await axios.delete(`http://localhost:5000/customers/${id}`);
        setIsLoaded(false);
        fetchData(); // Fetch updated data after deleting the customer
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleEditCustomer = (customer) => {
    // Set the form values with the selected customer data
    reset({
      cust_name: customer.cust_name,
      comp_name: customer.comp_name,
      comp_add: customer.comp_add,
      gstn_number: customer.gstn_number,
      cont_num: customer.cont_num,
    });

    // Store the customer ID in state for further processing
    setCurrentCustomerId(customer.id);

    // Set editing mode to true
    setIsEditing(true);
  };

  const onSubmit = async (data) => {
    try {
      if (isEditing) {
        // Perform update operation if editing
        const confirmUpdate = window.confirm(
          "Are you sure you want to update this customer?"
        );
        if (confirmUpdate) {
          await updateCustomer(data);
          setIsEditing(false);
        }
      } else {
        // Perform add operation if not editing
        await addCustomer(data);
      }

      // Reset the form and clear the current customer ID
      reset();
      setCurrentCustomerId("");

      setIsLoaded(false);
      fetchData(); // Fetch updated data after adding or updating a customer
    } catch (error) {
      console.log(error);
    }
  };

  const addCustomer = async (data) => {
    try {
      await axios.post("http://localhost:5000/customers", data);
    } catch (error) {
      console.log(error);
    }
  };

  const updateCustomer = async (data) => {
    try {
      const customerId = currentCustomerId;
      await axios.patch(`http://localhost:5000/customers/${customerId}`, data);
    } catch (error) {
      console.log(error);
    }
  };

  const handleUpdateCustomer = async (data) => {
    try {
      const confirmUpdate = window.confirm(
        "Are you sure you want to update this customer?"
      );
      if (confirmUpdate) {
        await updateCustomer(data);

        // Find the updated customer in the customers array and update its data
        setCustomers((prevCustomers) =>
          prevCustomers.map((customer) =>
            customer.id === currentCustomerId
              ? { ...customer, ...data }
              : customer
          )
        );

        // Reset form values and editing state
        reset();
        setIsEditing(false);
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      {/* Customer Form */}
      <div className="hero-body">
        <div className="container">
          <div className="columns is-centered">
            <div className="column is-6">
              <form
                className="p-8 rounded-s-md"
                style={{ backgroundColor: "#CAFFF0" }}
                onSubmit={handleSubmit(onSubmit)}
              >
                <h2 className="text-center m-5 text-header-add">
                  Add New Customer
                </h2>

                {/* Form fields... */}
                <div className="field">
                  <div className="control">
                    <label className="label">Customer Name</label>
                    <Controller
                      name="cust_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.cust_name ? "is-danger" : ""
                          }`}
                          type="text"
                          placeholder="Enter Customer Name"
                        />
                      )}
                    />
                    {errors.cust_name && (
                      <p className="help is-danger">
                        {errors.cust_name.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Company Name</label>
                    <Controller
                      name="comp_name"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.comp_name ? "is-danger" : ""
                          }`}
                          type="text"
                          placeholder="Enter Company Name"
                        />
                      )}
                    />
                    {errors.comp_name && (
                      <p className="help is-danger">
                        {errors.comp_name.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Company Address</label>
                    <Controller
                      name="comp_add"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.comp_add ? "is-danger" : ""
                          }`}
                          type="text"
                          placeholder="Enter Company Address"
                        />
                      )}
                    />
                    {errors.comp_add && (
                      <p className="help is-danger">
                        {errors.comp_add.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">GST Number</label>
                    <Controller
                      name="gstn_number"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.gstn_number ? "is-danger" : ""
                          }`}
                          type="text"
                          placeholder="Enter GST Number"
                        />
                      )}
                    />
                    {errors.gstn_number && (
                      <p className="help is-danger">
                        {errors.gstn_number.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <label className="label">Contact Number</label>
                    <Controller
                      name="cont_num"
                      control={control}
                      defaultValue=""
                      render={({ field }) => (
                        <input
                          {...field}
                          className={`input ${
                            errors.cont_num ? "is-danger" : ""
                          }`}
                          type="text"
                          placeholder="Enter Contact Number"
                        />
                      )}
                    />
                    {errors.cont_num && (
                      <p className="help is-danger">
                        {errors.cont_num.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="field">
                  <div className="control">
                    <button type="submit" className="button is-success">
                      {isEditing ? "Update" : "Add"}
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Customer List */}
      <div className="container mt-5">
        <table className="table is-striped is-fullwidth">
          <thead>
            <tr>
              <th>Sr.No</th>
              <th>Customer Name</th>
              <th>Company Name</th>
              <th>GST Number</th>
              <th>Contact Number</th>
              <th>Created At</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {isLoaded ? (
              customers.map((customer, index) => {
                const createdAtDate = new Date(
                  customer.createdAt
                ).toLocaleDateString(); // Extract the date and format it

                return (
                  <tr key={customer.id}>
                    <td>{index + 1}</td>
                    <td>{customer.cust_name}</td>
                    <td>{customer.comp_name}</td>
                    <td>{customer.gstn_number}</td>
                    <td>{customer.cont_num}</td>
                    <td>{createdAtDate}</td> {/* Display the formatted date */}
                    <td>
                      {user && (
                        <>
                          {user.role === "admin" || user.role === "dispatch" ? (
                            <>
                              <button
                                onClick={() => handleEditCustomer(customer)}
                                className="edit-button ml-1"
                              >
                                <i className="fi fi-rr-edit"></i>
                              </button>
                              <button
                                onClick={() =>
                                  handleDeleteCustomer(customer.id)
                                }
                                className="delete-button"
                              >
                                <i className="fi fi-rs-trash"></i>
                              </button>
                            </>
                          ) : (
                            <span>No actions</span>
                          )}
                        </>
                      )}
                    </td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan="7">Loading...</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default Production;





<div class="field flex-row" style="
    padding: 10px;
"><div class="w-auto" style="
    display: flex;
    gap: 10px;
"><div class="field"><label class="label">Start Date:</label><div class="control"><input type="date" class="input" value=""></div></div><div class="field"><label class="label">End Date:</label><div class="control"><input type="date" class="input" value=""></div></div></div><div class="export-csv-container"><a download="customers.csv" class="button is-primary" target="_self" href="blob:http://localhost:3000/0ddb567f-061e-4afb-a5c7-d3c0ec30c7eb">Export as CSV</a></div></div>